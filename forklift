#!/bin/sh
# Copyright 2023 David Farrell

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
set -eu
num_workers=1
num_fifos=0
next_fifo=1
fifo_prefix="${TMPDIR-/tmp}/forklift-$$"

cleanup() {
	rm -f "$fifo_prefix"*
	wait
}
trap cleanup ABRT EXIT INT TERM

# provides --pid for POSIX tail
tailpid() {
	file="$1"
	pid="$2"
	tail -f "$file" &
	childpid=$!
	while :; do
		if ! ps -p "$pid" >/dev/null 2>&1; then
			kill "$childpid" >/dev/null 2>&1
			break
		fi
		sleep 1
	done
}

# process args
while getopts "w:" opt; do
	case "$opt" in
	'w') num_workers="$OPTARG" ;;
	*)
		printf "Usage:\n\tforklift [-w#] command\n"
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))
if [ $# -ne 1 ]; then
	printf "Must provide 1 command. Usage:\n\tforklift [-w#] command\n"
	exit 1
fi

# fork child lock
export lock="$fifo_prefix-lock"
touch "$lock"
{
	while [ -f "$lock" ]; do
		sleep 1
	done
} &
lockpid=$!

# create worker pool
while [ "$num_fifos" -lt "$num_workers" ]; do
	num_fifos=$((num_fifos + 1))
	mkfifo "$fifo_prefix-$num_fifos"
	tailpid "$fifo_prefix-$num_fifos" $lockpid | eval "$1" &
done

# distribute input
while read -r line; do
	echo "$line" >"$fifo_prefix-$next_fifo"
	if [ "$next_fifo" -eq "$num_workers" ]; then
		next_fifo=1
	else
		next_fifo=$((next_fifo + 1))
	fi
done
